// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
  $max: breakpoint-max($name, $breakpoints);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  }
  @else {
    @content;
  }
}

// Name of the next breakpoint, or null for the last breakpoint.
//
//    >> breakpoint-next(sm)
//    md
//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    md
//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))
//    md
@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
  $n: index($breakpoint-names, $name);
  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}

// Maximum breakpoint width. Null for the largest (last) breakpoint.
// The maximum value is calculated as the minimum of the next one less 0.1.
//
//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    767px
@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
  $next: breakpoint-next($name, $breakpoints);
  @return if($next, breakpoint-min($next, $breakpoints) - 1px, null);
}

// Creates text alignment classes based on screen size
// TODO this would be nice to add to the framework
@each $breakpoint in map-keys($grid-breakpoints) {
  $infix: breakpoint-infix($breakpoint, $grid-breakpoints);
  @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
    // Provide text `[text-{bp}]` attributes for aligning text based on screen size
    [text#{$infix}-center] {
      text-align: center;
    }
    [text#{$infix}-left] {
      text-align: left;
    }
    [text#{$infix}-right] {
      text-align: right;
    }
    [hidden#{$infix}-up] {
      display: none;
    }
  }
  @include media-breakpoint-down($breakpoint, $grid-breakpoints) {
    [hidden#{$infix}-down] {
      display: none;
    }
  }
}

.button-large {
  width: 100%;
  line-height: $font-size-x-large;
  height: $font-size-x-large;
  border-radius: $button-border-radius;
}

.button-bottom {
  width: 80%;
  position: absolute;
  bottom: 8vh;
  left: 50%;
  transform: translateX(-50%);
  text-align: center;
  .fab {
    display: inline-block;
    margin: 0 10px;
  }
}

button {
  ion-spinner {
    margin-right: 10px;
    width: 20px;
    height: 20px;
  }
}

[no-scroll] {
  .scroll-content {
    overflow: hidden;
  }
  ::-webkit-scrollbar,
  *::-webkit-scrollbar {
    display: none;
  }
}

.toolbar-title-md {
  text-align: left !important;
}

.toolbar-title-ios {
  padding-top: 12px;
}

ion-app {
  &.md,
  &.ios {
    background-color: transparent !important;
    .ion-page.show-page~.nav-decor {
      background-color: transparent !important;
    }
  }
}

::-webkit-scrollbar {
  display: none;
}

@media only screen and (min-width: 768px) {
  #loggedInMenu {
    max-width: 300px;
  }
}

// Android transparent status bar (https://github.com/jeneser/ionic-super-bar)
.platform-android {
  #loggedInMenu {
    ion-header {
      min-height: 107px;
      ion-toolbar {
        min-height: inherit;
      }
    }
  }
  .ion-page {
    background-color: color($colors, primary) !important;
    &:after {
      height: 5px !important;
    }
    ion-header {
      padding-top: $cordova-md-statusbar-padding;
      background-color: color($colors, primary);
    }
    .scroll-content,
    ion-scroll {
      margin-top: 0 !important;
    }
    ion-header,
    .toolbar-background {
      background-color: color($colors, primary);
      transition: background-color 1s ease;
      &:after {
        height: 0 !important;
      }
    }
  }
}
